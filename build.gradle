plugins {
    id 'java-library'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'groovy'
    id "io.github.gradle-nexus.publish-plugin" version '1.1.0'
    id "com.diffplug.spotless" version "6.3.0"
    id "jacoco"
}

ext {
    isReleaseVersion = !projectVersion.endsWith("SNAPSHOT")
}

group mavenGroup
version projectVersion

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"

    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"

    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-validation")

    testRuntimeOnly("ch.qos.logback:logback-classic")

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("io.micronaut.reactor:micronaut-reactor")
    testImplementation "io.micronaut:micronaut-http-server-netty"
    testImplementation("org.awaitility:awaitility:4.2.0")
}


tasks.named('test') {
    useJUnitPlatform()
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

java {
    withJavadocJar()
    withSourcesJar()
}

Closure pomInfo = {
    name = project.name
    description = projectDesc
    url = projectUrl
    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            name = developerName
            email = developerEmail
            organization = organizationName
            organizationUrl = organizationWebsite
        }
    }
    scm {
        connection = "scm:git:https://github.com/${githubOrg}/${githubRepo}.git"
        developerConnection = "scm:git:https://github.com/${githubOrg}/${githubRepo}.git"
        url = "https://github.com/${githubOrg}/${githubRepo}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            from components.java
            pom pomInfo
        }
    }
    repositories {
        maven {
            url = isReleaseVersion ? 'https://s01.oss.sonatype.org/' : 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                password System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

spotless {
    java {
        licenseHeaderFile("$rootDir/config/spotless.license.java")
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            password = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

